stages:
  - lint
  - test
  - build
  - deploy

Lint:
  stage: lint
  image: python:3.12
  script:
    - pip install -r server/requirements/test.txt
    - flake8

Test:
  stage: test
  image: python:3.12
  script:
    - pip install -r server/requirements/base.txt
    - pip install -r server/requirements/test.txt
    - python3 -m pytest server/

Build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - mkdir -p envs/docker/
    - cp $DEBUG_ENV_FILE envs/.debug
    - cp $DB_ENV_FILE envs/docker/.db
    - cp $REDIS_ENV_FILE envs/docker/.redis
    - cp $SERVER_ENV_FILE envs/docker/.server
    - cp $CLIENT_ENV_FILE envs/docker/.client
  script:
    - docker-compose --env-file envs/.debug --env-file envs/docker/.db --env-file envs/docker/.client --env-file envs/docker/.server build --no-cache

Deploy:
  only:
    - master
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD

    - mkdir -p envs/docker/
    - cp $DEBUG_ENV_FILE envs/.debug
    - cp $DB_ENV_FILE envs/docker/.db
    - cp $REDIS_ENV_FILE envs/docker/.redis
    - cp $SERVER_ENV_FILE envs/docker/.server
    - cp $CLIENT_ENV_FILE envs/docker/.client
  script:
    - docker-compose --env-file envs/.debug --env-file envs/docker/.db --env-file envs/docker/.client --env-file envs/docker/.server build --no-cache
    
    - docker tag enigma-server:latest $CI_REGISTRY/$CI_REGISTRY_USER/enigma/server:latest
    - docker tag enigma-client:latest $CI_REGISTRY/$CI_REGISTRY_USER/enigma/client:latest

    - docker push $CI_REGISTRY/$CI_REGISTRY_USER/enigma/server:latest
    - docker push $CI_REGISTRY/$CI_REGISTRY_USER/enigma/client:latest