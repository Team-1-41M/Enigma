name: CI

on: 
  push:
    branches: ["*"]
  pull_request:
    branches: [master]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: |
          pip install -r server/requirements/test.txt
          flake8

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: |
          pip install -r server/requirements/base.txt
          pip install -r server/requirements/test.txt
          python3 -m pytest server/

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          touch .env
          
          echo "DEBUG=${{ vars.DEBUG }}" >> .env

          echo "NUXT_HOST=${{ vars.NUXT_HOST }}" >> .env
          echo "NUXT_PORT=${{ vars.NUXT_PORT }}" >> .env
          echo "API_BASE_URL=${{ vars.API_BASE_URL }}" >> .env

          echo "SERVER_NAME=${{ vars.SERVER_NAME }}" >> .env
          echo "SERVER_HOST=${{ vars.SERVER_HOST }}" >> .env
          echo "SERVER_PORT=${{ vars.SERVER_PORT }}" >> .env
          echo "SERVER_RELOAD=${{ vars.SERVER_RELOAD }}" >> .env

          echo "HTTPS=${{ vars.HTTPS }}" >> .env
          echo "CORS_ALLOWED_ORIGINS=${{ vars.CORS_ALLOWED_ORIGINS }}" >> .env

          echo "SUPERUSER_NAME=${{ vars.SUPERUSER_NAME }}" >> .env
          echo "SUPERUSER_EMAIL=${{ vars.SUPERUSER_EMAIL }}" >> .env
          echo "SUPERUSER_PASSWORD=${{ vars.SUPERUSER_PASSWORD }}" >> .env

          echo "CACHE_TYPE=${{ vars.CACHE_TYPE }}" >> .env
          echo "CACHE_HOST=${{ vars.CACHE_HOST }}" >> .env
          echo "CACHE_PORT=${{ vars.CACHE_PORT }}" >> .env
          echo "CACHE_DB=${{ vars.CACHE_DB }}" >> .env

          echo "DB_ENGINE=${{ vars.DB_ENGINE }}" >> .env
          echo "DB_NAME=${{ vars.DB_NAME }}" >> .env
          echo "DB_USER=${{ vars.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ vars.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ vars.DB_HOST }}" >> .env
          echo "DB_PORT=${{ vars.DB_PORT }}" >> .env

          docker compose build --no-cache

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      - run: |
          echo $CR_PAT | docker login ${{ secrets.CI_REGISTRY }} -u ${{ secrets.CI_REGISTRY_USER }} --password-stdin